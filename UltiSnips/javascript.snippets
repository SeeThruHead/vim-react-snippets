global !p
def capscore(t):
	return '_'.join([ w.upper() for w in re.findall('[A-Z]+[a-z]*', t) ])

def lowerdash(t):
	return '-'.join([ w.lower() for w in re.findall('[a-z]+|[A-Z]+[a-z]*', t) ])

def datakeys(t):
	return ', '.join([ '\'' + w[0].lower() + w[1:] + '\'' for w in re.findall('[A-Z][A-z]+', t) ])

def apifuncs(t):
	return '\n  '.join([ w + '(context.);' for w in t.split(', ') ])
endglobal



# Normal javascript snippets
#
snippet imp "Import a lib" b
import $1 from '$2`!p snip.rv=lowerdash(t[1])`';
endsnippet

snippet impf "Import a file" b
import $1 from '${2:./}${3:$1}';
endsnippet

snippet impn "Import nested" b
import { $1 } from '$2';
endsnippet

snippet impp "Import without from" b
import '$1';
endsnippet

snippet rc "Require const" b
const $1 = require('`!p snip.rv=lowerdash(t[1])`');
endsnippet

snippet "(?=.)=>" "Create an arrow function" r
(${1:arg}) => {
	$2
}
endsnippet

snippet "(?=.)=>>" "Create an arrow function inline" r
(${1:arg}) => $2
endsnippet

snippet imm "Import immutable List and Map" b
import { List, Map } from 'immutable';
endsnippet


snippet icn "Import classnames" b
import classnames from 'classnames';
endsnippet

snippet "\.(map|filter|forEach|reduce)" "Map with an arrow function" r
.`!p snip.rv = match.group(1)`($1 => {
	return $2;
});
endsnippet

snippet "\.(map|filter|forEach|reduce)=" "Map with an arrow function inline" r
.`!p snip.rv = match.group(1)`($1 => $2)
endsnippet

snippet cl "Console.log" b
console.log($1);
endsnippet

snippet clv "Console log variable" b
console.log('$1:', $1);
endsnippet

snippet exp "Export from location" b
export $1 from '${2:./}$1';
endsnippet

snippet expn "Export nested" b
export { $1 } from '${2:./}';
endsnippet

snippet expi "Export from a file import" b
import $1 from '${2:./}${3:$1}';
export ${4:default} $1;
endsnippet

snippet expix "Export from a jsx file import" b
import $1 from '${2:./}${3:$1}.jsx';
export ${4:default} $1;
endsnippet

snippet expf "Export function" b
export ${1:default }function($2) {
	$3
}
endsnippet

# ==========================================
# React Snippets
#
snippet rce "React class exported" b
import React, { Component, PropTypes } from 'react';
import PureRenderMixin from 'react-addons-pure-render-mixin';

export default class ${1:`!v expand('%:t:r')`} extends Component {
	constructor(props) {
		super(props);

		this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);
	}

	render() {
		return (
			${2:<div />}
		);
	}
}
endsnippet


snippet rfe "React function exported" b
import React from 'react';

export default function `!v expand('%:t:r')`($2) {
	return (
		${3:<div>
		</div>}
	);
}
endsnippet

snippet icss "Impore css transition group" b
import CSSTransitionGroup from 'react-addons-css-transition-group';
endsnippet

snippet iadd "Import react addon" b
import $1 from 'react-addons-`!p snip.rv=lowerdash(t[1])`';
endsnippet

snippet rcf "React class function" b
$1 = (${2:e}) => {
	$3
};
endsnippet


snippet reactf "React file with a render" b
import React from 'react';
import ReactDOM from 'react-dom';

import $1 from '${2:./}$1';

ReactDOM.render(<$1 />, document.getElementById('${3:app}'));
endsnippet

# ==========================================
# Component Specs and Lifecycle Section
#
snippet dp "get default props" b
static defaultProps = {
	$1
};
endsnippet


snippet pt "React prop types definition" b
static propTypes = {
	${1:someProp}: ${2:PropTypes.string},
};
endsnippet


snippet cwm "component will mount" b
componentWillMount() {
	$1
}
endsnippet

snippet cdm "component did mount" b
componentDidMount() {
	$1
}
endsnippet

snippet cwrp "component will receive props" b
componentWillReceiveProps(nextProps) {
	$1
}
endsnippet

snippet scu "should component update" b
shouldComponentUpdate(nextProps, nextState) {
	return $1;
}
endsnippet

snippet cwu "component will update" b
componentWillUpdate(nextProps, nextState) {
	$3
}
endsnippet

snippet cdu "component did update" b
componentDidUpdate(prevProps, prevState) {
	$1
}
endsnippet

snippet cwum "component will unmount" b
componentWillUnmount() {
	$1
}
endsnippet


# ==========================================
# Prop Types Section
#

# Inline prop types
snippet pt.a "React PropTypes array" w
PropTypes.array
endsnippet

snippet pt.ar "React PropTypes array required" w
PropTypes.array.isRequired
endsnippet

snippet pt.b "React PropTypes boolean" w
PropTypes.bool
endsnippet

snippet pt.br "React PropTypes boolean required" w
PropTypes.bool.isRequired
endsnippet

snippet pt.f "React PropTypes function" w
PropTypes.func
endsnippet

snippet pt.fr "React PropTypes function required" w
PropTypes.func.isRequired
endsnippet

snippet pt.nu "React PropTypes number" w
PropTypes.number
endsnippet

snippet pt.nur "React PropTypes number required" w
PropTypes.number.isRequired
endsnippet

snippet pt.o "React PropTypes object" w
PropTypes.object
endsnippet

snippet pt.or "React PropTypes object required" w
PropTypes.object.isRequired
endsnippet

snippet pt.s "React PropType string" w
PropTypes.string
endsnippet

snippet pt.sr "React PropType string required" w
PropTypes.string.isRequired
endsnippet

snippet pt.no "React PropTypes node" w
PropTypes.node
endsnippet

snippet pt.nor "React PropTypes node required" w
PropTypes.node.isRequired
endsnippet

snippet pt.e "React PropTypes element" w
PropTypes.element
endsnippet

snippet pt.er "React PropTypes element required" w
PropTypes.element.isRequired
endsnippet

snippet pt.ao "React PropTypes arrayOf" w
PropTypes.arrayOf(${1:PropTypes.string})
endsnippet

snippet pt.aor "React PropTypes arrayOf required" w
PropTypes.arrayOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.io "React PropTypes instanceOf" w
PropTypes.instanceOf(${1:PropTypes.string})
endsnippet

snippet pt.ior "React PropTypes instanceOf required" w
PropTypes.instanceOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.oo "React PropTypes objectOf" w
PropTypes.objectOf(${1:PropTypes.string})
endsnippet

snippet pt.oor "React PropTypes objectOf required" w
PropTypes.objectOf(${1:PropTypes.string}).isRequired
endsnippet

snippet pt.one "React PropTypes oneOf" w
PropTypes.oneOf(['$1'$2])
endsnippet

snippet pt.oner "React PropTypes oneOf required" w
PropTypes.oneOf(['$1'$2]).isRequired
endsnippet

snippet pt.onet "React PropTypes onOfType" w
PropTypes.oneOfType([
	$1
])
endsnippet

snippet pt.onetr "React PropTypes onOfType required" w
PropTypes.oneOfType([
	$1
]).isRequired
endsnippet

snippet pt.sh "React PropTyes shape" w
PropTypes.shape({
	$1
})
endsnippet

snippet pt.shr "React PropTypes shape required" w
PropTypes.shape({
	$1
}).isRequired
endsnippet


# ==========================================
# Flux Store Snippets
#
snippet fsto "new flux store" b
import AppDispatcher from '$1/common/AppDispatcher';
import { Map, fromJS } from 'immutable';

import FluxStore from '$1/stores/FluxStore';
import ${2:`!v substitute(expand('%:t:r'), 'Store', '', '')`}Constants from '$1/actionConstants/$2Constants';

let _$3 = fromJS({
});

class _${4:`!v expand('%:t:r')`} extends FluxStore {
	$0
}

let $4 = new _$4();
export default $4;

AppDispatcher.register(payload => {
	const action = payload.action;

	switch(action.actionType) {
		$5
		default:
			return;
	}
	$4.emitChange();
});
endsnippet


snippet fcase "flux store case statement" b
case ${1:`!v substitute(expand('%:t:r'), 'Store', '', '')`}Constants.`!p snip.rv=capscore(t[1])`_$2:
  $3
	break;
endsnippet

# ==========================================
# Flux Actions Snippets
#
snippet fact "new flux actions" b
import AppDispatcher from '$1/common/AppDispatcher';
import ${2:`!v substitute(expand('%:t:r'), 'Actions', '', '')`}Constants from '$1/actionConstants/$2Constants';

export default {
	$0
};
endsnippet


snippet faf "new flux action function" b
$1($2) {
	AppDispatcher.handleAction({
		actionType: ${3:`!v substitute(expand('%:t:r'), 'Actions', '', '')`}Constants.`!p snip.rv=capscore(t[3])`_${1/([A-Z]+)|([a-z])/(?1:_$0)(?2:\u$0)/g},
		${5:${2/(\w+).*/$1/}}: ${2/(\w+).*/$1/}$6
	});
},$0
endsnippet



# ==========================================
# Flux Constants Snippets
#
snippet fcon "flux constants" b
import keymirror from 'keymirror';

export default keymirror({
	$0
});
endsnippet


# ==========================================
# Testing
#
snippet rtest "React component test" b
import React from 'react';
import ReactDOM from 'react-dom';
import TestUtils from 'react-addons-test-utils';
import { expect } from 'chai';

import ${1:`!v expand('%:t:r')`} from '$2/js/components/$1';

const { renderIntoDocument, Simulate } = TestUtils;

describe('$1', () => {
	
	it('$3', () => {
		const component = renderIntoDocument(
			<$1 $4 />
		);
		$5
	});
});
endsnippet

snippet it "Testing it statement" b
it('$1', () => {
	$2
});
endsnippet

snippet ee "Expect equal" b
expect($1).to.equal($2);
endsnippet


# ==========================================
# React Documenting
#
snippet rdoc "React Documentation Component" b
import React, { Component } from 'react';
import PureRenderMixin from 'react-addons-pure-render-mixin';
import $1 from 'react-md/${2:$1s}';

import DocPage from 'react-md-documentation';
import $1Examples from './$1Examples';
import $1ExamplesRaw from '!!raw!./$1Examples';
//import './_`!p snip.rv=lowerdash(t[1])`.scss';

export default class `!v expand('%:t:r')` extends Component {
	constructor(props) {
		super(props);

		this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);
	}

	render() {
		return (
			<DocPage
				components={[{
					component: $1,
					details: [$4],
				}]}
				examples={[{
					markdown: $1ExamplesRaw,
					children: <$1Examples />,
				}]}
				>
				$3
			</DocPage>
		);
	}
}
endsnippet

snippet rpt "React Documentation prop type"
{
  name: '$1',
	pt: '$2',
	desc: \`$3\`,
},
endsnippet
